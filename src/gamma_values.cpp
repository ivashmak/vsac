#include "precomp.hpp"

namespace cv { namespace vsac {
class GammaValuesImpl : public GammaValues {
    std::vector<double> gamma_complete, gamma_incomplete, gamma;
    const double max_range_complete = 4.62, max_range_gamma = 1.52;
    int max_size_table, DoF;
public:
    GammaValuesImpl (int DoF_, int max_size_table_) {
        max_size_table = max_size_table_;
        DoF = DoF_;
        /*
         * Gamma values for degrees of freedom n = 2 and sigma quantile 99% of chi distribution
         * (squared root of chi-squared distribution), in the range <0; 4.62> for complete values
         * and <0, 1.52> for gamma values.
         * Number of anchor points is 50. Other values are approximated using linear interpolation
         */
        const int number_of_anchor_points = 50;
        std::vector<double> gamma_complete_anchor, gamma_incomplete_anchor, gamma_anchor;
        if (DoF == 2) {
            gamma_complete_anchor = std::vector<double>
                    {1.7724538509055159, 1.182606138403832, 0.962685372890749, 0.8090013493715409,
                     0.6909325812483967, 0.5961199186942078, 0.5179833984918483, 0.45248091153099873,
                     0.39690029823142897, 0.34930995878395804, 0.3082742109224103, 0.2726914551904204,
                     0.2416954924567404, 0.21459196516027726, 0.190815580770884, 0.16990026519723456,
                     0.15145770273372564, 0.13516150988807635, 0.12073530906427948, 0.10794357255251595,
                     0.0965844793065712, 0.08648426334883624, 0.07749268706639856, 0.06947937608738222,
                     0.062330823249820304, 0.05594791865006951, 0.05024389794830681, 0.045142626552664405,
                     0.040577155977706246, 0.03648850256745103, 0.03282460924226794, 0.029539458909083157,
                     0.02659231432268328, 0.023947063970062663, 0.021571657306774475, 0.01943761564987864,
                     0.017519607407598645, 0.015795078236273064, 0.014243928262247118, 0.012848229767187478,
                     0.011591979769030827, 0.010460882783057988, 0.009442159753944173, 0.008524379737926344,
                     0.007697311406424555, 0.006951791856026042, 0.006279610558635573, 0.005673406581042374,
                     0.005126577454218803, 0.004633198286725555};

            gamma_incomplete_anchor = std::vector<double>
                    {0.0, 0.01773096912803939, 0.047486924846289004, 0.08265437835139826, 0.120639343491371,
                     0.15993024714868515, 0.19954558593754865, 0.23881753504915218, 0.2772830648361923,
                     0.3146208784488923, 0.3506114446939783, 0.385110056889967, 0.41802785670077697,
                     0.44931803198258047, 0.47896553567848993, 0.5069792897777948, 0.5333861945970247,
                     0.5582264802664578, 0.581550074874317, 0.6034137543595729, 0.6238789008764282,
                     0.6430097394182639, 0.6608719532994989, 0.6775316015953519, 0.6930542783709592,
                     0.7075044661695132, 0.7209450459078338, 0.733436932830201, 0.7450388140484766,
                     0.7558069678435577, 0.7657951486073097, 0.7750545242776943, 0.7836336555215403,
                     0.7915785078697124, 0.798932489600361, 0.8057365094688473, 0.8120290494534339,
                     0.8178462485678104, 0.8232219945197348, 0.8281880205973585, 0.8327740056635289,
                     0.8370076755516281, 0.8409149044990385, 0.8445198155381767, 0.8478448790000731,
                     0.8509110084798414, 0.8537376537738418, 0.8563428904304485, 0.8587435056647642,
                     0.8609550804762539};

            gamma_anchor = std::vector<double>
                    {1.7724538509055159, 1.427187162582056, 1.2890382454046982, 1.186244737282388,
                     1.1021938955410173, 1.0303674512016956, 0.9673796229113404, 0.9111932804012203,
                     0.8604640514722175, 0.814246149432561, 0.7718421763436497, 0.7327190195355812,
                     0.6964573670982434, 0.6627197089339725, 0.6312291454822467, 0.6017548373556638,
                     0.5741017071093776, 0.5481029597580317, 0.523614528104858, 0.5005108666212138,
                     0.478681711577816, 0.4580295473431646, 0.43846759792922513, 0.41991821541471996,
                     0.40231157253054745, 0.38558459136185, 0.3696800574963841, 0.3545458813847714,
                     0.340134477710645, 0.32640224021796493, 0.3133090943985706, 0.3008181141790485,
                     0.28889519159238314, 0.2775087506098113, 0.2666294980086962, 0.2562302054837794,
                     0.24628551826026082, 0.2367717863030556, 0.22766691488600885, 0.21895023182476064,
                     0.2106023691144937, 0.2026051570714723, 0.19494152937027823, 0.18759543761063277,
                     0.1805517742482484, 0.17379630289125447, 0.16731559510356395, 0.1610969729740903,
                     0.1551284568099053, 0.14939871739550692};
        } else if (DoF == 4) {
            gamma_complete_anchor = std::vector<double>
                    {0.8862269254527579, 0.8565031274581876, 0.8084399858188377, 0.753843063140069,
                     0.6971784133383047, 0.6408628972803088, 0.5863099742275334, 0.5343526703533825,
                     0.4854604320275274, 0.43986539041020006, 0.3976417632360964, 0.3587583042506961,
                     0.3231140767471727, 0.29056335822102186, 0.2609331882490734, 0.23403579724439239,
                     0.20967740057611844, 0.18766437455368157, 0.1678075278449075, 0.14992497912034508,
                     0.1338440121771392, 0.11940218156077448, 0.1064478712346681, 0.09484045751125075,
                     0.0844501895845838, 0.07515787277607777, 0.0668544183931697, 0.059440308060530536,
                     0.05282500819659981, 0.04692636101964368, 0.04166997137535748, 0.03698860326098469,
                     0.03282159578788398, 0.029114305179480934, 0.025817577018995758, 0.022887251168205863,
                     0.020283700441383053, 0.017971403134130298, 0.015918548794879132, 0.01409667612476428,
                     0.01248034155067896, 0.011046816798399478, 0.009775813667959909, 0.008649234158680685,
                     0.00765094408824692, 0.006766568384861141, 0.005983306292789901, 0.005289764811113801,
                     0.004675808776670581, 0.004132426100092282};

            gamma_incomplete_anchor = std::vector<double>
                    {0.0, 0.0023275586155107044, 0.011991980231801442, 0.03012273470440711, 0.0564135656456534,
                     0.08998593622793521, 0.12972514958538078, 0.17445137482497822, 0.22301320060814378,
                     0.27433882423060924, 0.32746226709896176, 0.3815343294508663, 0.4358241226014674,
                     0.48971485292232686, 0.5426962348372576, 0.5943550932668373, 0.6443651830992233,
                     0.6924768971324937, 0.7385072921077044, 0.7823306967750984, 0.8238700521294547,
                     0.8630890560582838, 0.8999851319056262, 0.9345832054526026, 0.9669302523645557,
                     0.9970905645753885, 1.0251416767400958, 1.0511708908913027, 1.0752723374146955,
                     1.0975445124205394, 1.1180882348183134, 1.1370049703845733, 1.154395474483944,
                     1.17035870960211, 1.1849909983001268, 1.1983853764826353, 1.2106311159127794,
                     1.2218133886593996, 1.232013049605252, 1.2413065162725896, 1.2497657280392533,
                     1.2574581693368834, 1.2644469436600059, 1.2707908871904656, 1.2765447125771872,
                     1.2817591749281276, 1.2864812533907526, 1.2907543428398003, 1.2946184511757328, 1.2981103985820053};

            gamma_anchor = std::vector<double>
                    {0.8862269254527579, 0.8816947197934623, 0.8736832207705326, 0.8636755175582929,
                     0.8522462061782166, 0.839744545533519, 0.8264145469436694, 0.8124395110752455,
                     0.7979633453661882, 0.7831023814755875, 0.767952598788793, 0.7525943614337567,
                     0.7370956943737236, 0.7215146454900033, 0.7059010466186272, 0.6902978629852801,
                     0.6747422511110726, 0.659266404272326, 0.6438982393266162, 0.6286619625631336,
                     0.6135785415817068, 0.5986661029848691, 0.5839402706557383, 0.5694144558409644,
                     0.5551001076899786, 0.5410069310138695, 0.527143076617641, 0.5135153084922145,
                     0.5001291513337941, 0.486989021222706, 0.47409834179516114, 0.46145964784612004,
                     0.44907467798522704, 0.4369444577125623, 0.4250693740733351, 0.4134492428804455,
                     0.4020833693533207, 0.3909706029046731, 0.3801093867091701, 0.369497802605879,
                     0.35913361181688314, 0.34901429190539934, 0.3391370703462754, 0.3294989550384267,
                     0.3200967620514571, 0.3109271408663314, 0.30198659734195266, 0.2932715146149191,
                     0.2847781721183308, 0.27650276288665515};
        } else assert(false);
        // allocate tables
        gamma_complete = std::vector<double>(max_size_table);
        gamma_incomplete = std::vector<double>(max_size_table);
        gamma = std::vector<double>(max_size_table);

        const int step = (int)((double)max_size_table / (number_of_anchor_points-1));
        int arr_cnt = 0;
        for (int i = 0; i < number_of_anchor_points-1; i++) {
             const double complete_x0 = gamma_complete_anchor[i], step_complete = (gamma_complete_anchor[i+1] - complete_x0) / step;
             const double incomplete_x0 = gamma_incomplete_anchor[i], step_incomplete = (gamma_incomplete_anchor[i+1] - incomplete_x0) / step;
             const double gamma_x0 = gamma_anchor[i], step_gamma = (gamma_anchor[i+1] - gamma_x0) / step;

             for (int j = 0; j < step; j++) {
                 gamma_complete[arr_cnt] = complete_x0 + j * step_complete;
                 gamma_incomplete[arr_cnt] = incomplete_x0 + j * step_incomplete;
                 gamma[arr_cnt++] = gamma_x0 + j * step_gamma;
             }
        }
        if (arr_cnt < max_size_table) {
            // if array was not totally filled (in some cases can happen) then copy last values
            std::fill(gamma_complete.begin()+arr_cnt, gamma_complete.end(), gamma_complete[arr_cnt-1]);
            std::fill(gamma_incomplete.begin()+arr_cnt, gamma_incomplete.end(), gamma_incomplete[arr_cnt-1]);
            std::fill(gamma.begin()+arr_cnt, gamma.end(), gamma[arr_cnt-1]);
        }
    }

    const std::vector<double> &getCompleteGammaValues() const override { return gamma_complete; }
    const std::vector<double> &getIncompleteGammaValues() const override { return gamma_incomplete; }
    const std::vector<double> &getGammaValues() const override { return gamma; }
    double getScaleOfGammaCompleteValues () const override { return gamma_complete.size() / max_range_complete; }
    double getScaleOfGammaValues () const override { return gamma.size() / max_range_gamma; }
    int getTableSize () const override { return max_size_table; }
};
Ptr<GammaValues> GammaValues::create(int DoF, int max_size_table) {
    return makePtr<GammaValuesImpl>(DoF, max_size_table);
}
}}